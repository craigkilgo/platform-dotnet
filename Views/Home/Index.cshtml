@{
    ViewData["Title"] = "Research Project CISS - Dotnet";
}

@model dotnet.Models.ViewModels.IndexViewModel
<!--
Retrieve data from a database and construct a hash table utilizing SHA-256 as the hashing algorithm
Retrieve data from a database and perform a merge sort on one of the values in the table
Retrieve data from a database, model this data as a graph, and utilize Dijkstra’s algorithm to find the shortest distance between two nodes
Generate 20 random numbers and insert them into an array.  Find the maximum and minimum values in this array.

Generate a list of all primes under 500 using the Sieve of Eratosthenes.
Given 10 pairs of strings and one hash value, return a boolean value based on the presence of a hash value from the concatenation of those pairs from the list.
Given the values, insert a row into a database table
-->

<div class="container">
<h1>Research Project CISS - Dotnet</h1>
<hr>
<div class="row">
	<div class="card">
	<h3>graph</h3>
	Shortest path from "Carlos <span style="color: #4286f4; font-weight:bold;">(6)</span>" to "Matthew <span style="color: #ff2da0; font-weight:bold;">(77)</span>":
	<h4>6 => 41 => 93 => 96 => 40 => 52 => 77</h4>
	<div id="graph-container">
	</div>
	</div>
	</div>
<div class="row">
	<div class="card">
		<h3>hash of random values</h3>
				<table>
					<thead>
						<tr>
						<th>hash</th>
						<th>value</th>
						</tr>
					</thead>
					<tbody>

						@foreach (FiftyValuesView v in Model.fifty){
							<tr>
								<td>
									@v.Hash
								</td>
								<td>
									@v.Value
								</td>
							</tr>

						}
									</tbody>
				</table>
			</div>
</div>


<div class="row">
	<div class="card">
	<h3>sorted names</h3>


		<table>
			<thead>
				<tr>
				<th>#</th>
				<th>id</th>
				<th>name</th>
				</tr>
			</thead>
			<tbody>
				@{
					int count = 1;
				}

				@foreach (Names n in Model.names){
					<tr>
						<td>
							@(count++)
						</td>
						<td>
							@n.Id
						</td>
						<td>
							@n.Name
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
</div>


<div class="row">
	<div class="card">
	<h3>20 random value</h3>
	<h4>
		max: @Model.Max
	</h4>
	<h4>
		min: @Model.Min
	</h4>


		<table>
			<thead>
				<tr>
				<th>value</th>
				</tr>
			</thead>
			<tbody>
@foreach (int r in Model.values){
	<tr>
		<td>
			@r
		</td>
	</tr>
}
			</tbody>
		</table>
	</div>
</div>

<div class="row">
	<div class="card">
	<h3>primes under 500</h3>
		<div id="primes">
				@foreach (int p in ViewBag.primes){
					<div>
						@p
					</div>
				}
		</div>
	</div>
</div>

<div class="row">
	<div class="card">
		<h3>string pairs and check for hash</h3>
		<h5>hash: acb80281e4e94213c7452a81fa08f61893eff5ffa62d50876da8d1fed4710d95</h5>
		<h5>result: @Model.hashPresent
		</h5>
				<table>
					<thead>
						<tr>
						<th>string1</th>
						<th>string2</th>
						</tr>
					</thead>
					<tbody>
						<tr>
						<td>ethereal</td>
						<td>front</td>
						</tr>
						<tr>
						<td>ask</td>
						<td>release</td>
						</tr>
						<tr>
						<td>bucket</td>
						<td>unique</td>
						</tr>
						<tr>
						<td>plug</td>
						<td>average</td>
						</tr>
						<tr>
						<td>trade</td>
						<td>weather</td>
						</tr>
						<tr>
						<td>card</td>
						<td>wide</td>
						</tr>
						<tr>
						<td>numberless</td>
						<td>copper</td>
						</tr>
						<tr>
						<td>fruit</td>
						<td>example</td>
						</tr>
						<tr>
						<td>slap</td>
						<td>pause</td>
						</tr>
						<tr>
						<td>jittery</td>
						<td>confused</td>
						</tr>
					</tbody>
				</table>
			</div>
</div>

<div class="row">
	<div class="card">
	<h3>database insert</h3>
	The following value was inserted into the <span style="font-weight:bold;">"transactions"</span> table:<br>
	<span style="font-weight:bold;">customer: </span> Ben Hogan<br>
	<span style="font-weight:bold;">item: </span> Cleek<br>
	<span style="font-weight:bold;">price: </span> $9.00<br>
	</div>
</div>


</div>

<script>

	var data2 = `@Html.Raw(Json.Serialize(Model.s))`;

	
	// Instantiate sigma:
	s = new sigma({
	  graph: JSON.parse(data2),
	  container: 'graph-container'
	});

	var n1 = s.graph.nodes('6');
	n1.color = '#4286f4';

	var n2 = s.graph.nodes('77');
	n2.color = '#ff2da0';

	s.refresh({ skipIndexation: true });

</script>
